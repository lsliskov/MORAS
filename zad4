Set Implicit Arguments.
Require Import List.
Import ListNotations.


(* Bit *)

Inductive B : Type :=
  | O : B
  | I : B.

Definition And (x y : B) : B :=
match x with
  | O => O
  | I => y
end.

Definition Or (x y : B) : B :=
match x with
  | O => y
  | I => I
end.

Definition Not (x : B) : B :=
match x with
  | O => I
  | I => O
end.

Definition Add (x y c : B) : B :=
match x, y with
  | O, O => c
  | I, I => c
  | _, _ => Not c
end.

Definition Rem (x y c : B) : B :=
match x, y with
  | O, O => O
  | I, I => I
  | _, _ => c
end.

(* List *)

Fixpoint AndL (x y : list B) : list B :=
match x, y with
| [], _ => []
| _, [] => []
| x :: xs, y :: ys => And x y :: AndL xs ys
end.

Fixpoint OrL (x y : list B) : list B :=
match x, y with
| [], _ => []
| _, [] => []
| x :: xs, y :: ys => Or x y :: OrL xs ys
end.

Fixpoint NotL (x : list B) : list B :=
match x with
  | [] => []
  | x :: xs => Not x :: NotL xs
end.

Fixpoint AddLr (x y : list B) (c : B) : list B :=
match x, y with
| [], _ => []
| _, [] => []
| x :: xs, y :: ys => Add x y c :: AddLr xs ys (Rem x y c)
end.

Definition AddL (x y : list B) : list B := rev (AddLr (rev x) (rev y) O).

Fixpoint IncLr (x : list B) (c : B) : list B :=
match x with
| [] => []
| x :: xs => Add x I c :: IncLr xs (Rem x I c)
end.

Definition IncL (x : list B) : list B := rev (IncLr (rev x) O).

(* ALU *)

Definition flag_zx (f : B) (x : list B) : list B :=
match f with
| I => repeat O (length x)
| O => x
end.

Definition flag_nx (f : B) (x : list B) : list B :=
match f with
| I => NotL x
| O => x
end.

Definition flag_f (f : B) (x y : list B) : list B :=
match f with
| I => AddL x y
| O => AndL x y
end.

Definition ALU (x y : list B) (zx nx zy ny f no : B) : list B := 
  flag_nx no (flag_f f (flag_nx nx (flag_zx zx x)) (flag_nx ny (flag_zx zy y))).

(* Teoremi *)

Lemma ALU_zero (x y : list B) :
  length x = length y -> ALU x y I O I O I O = repeat O (length x).
Proof. Abort.

Lemma ALU_minus_one (x y : list B) : 
  length x = length y -> ALU x y I I I O I O = repeat I (length x).
Proof. Abort.

Lemma ALU_x (x y : list B) : 
  length x = length y -> ALU x y O O I I O O = x.
Proof. Abort.

Lemma ALU_y (x y : list B) : 
  length x = length y -> ALU x y I I O O O O = y.
Proof. Abort.

Lemma ALU_Not_x (x y : list B) : 
  length x = length y -> ALU x y O O I I O I = NotL x.
Proof. Abort.

Lemma ALU_Not_y (x y : list B) : 
  length x = length y -> ALU x y I I O O O I = NotL y.
Proof. Abort.

Lemma ALU_Add (x y : list B) : 
  length x = length y -> ALU x y O O O O I O = AddL x y.
Proof. Abort.

(* DZ *)

Lemma ALU_And (x y : list B) : 
  length x = length y -> ALU x y O O O O O O = AndL x y.
Proof. 
  intros ele. simpl. trivial.
Qed.

Lemma HELP_Or: forall x y : list B, 
  NotL (AndL (NotL x) (NotL y)) = OrL x y.
Proof. 
  induction x,y; simpl; try reflexivity. rewrite IHx.
  assert(Help: forall a b : B, Not (And (Not a) (Not b)) = Or a b).
  - induction a0, b0; simpl; try reflexivity.
  - rewrite Help. trivial.
Qed.

Lemma ALU_Or (x y : list B) : 
  length x = length y -> ALU x y O I O I O I = OrL x y.
Proof.
  intros ele. simpl. induction x.
- simpl. trivial.
- rewrite HELP_Or. reflexivity.
Qed. 

Lemma ALU_One (n : nat) (x y : list B) :
  length x = n /\ length y = n /\ n <> 0 -> ALU x y I I I I I I = repeat O (pred n) ++ [I].
Proof. 
  intros (len_x & len_y & n_not_zero). simpl.
  - rewrite len_x, len_y.  
  assert(H: forall n, NotL (repeat O n) = repeat I n).
  -- intros. induction n0; simpl; try trivial.
    + rewrite IHn0. reflexivity.
  -- rewrite H. unfold AddL.
  assert (J : forall (b : B) n, rev (repeat b n) = repeat b n).
  intros. induction n0; simpl; try reflexivity.
  --- simpl.
  assert (M : forall (b : B) n, repeat b n ++ [b] = b :: repeat b n).
  intros. induction n1; simpl; try reflexivity.
  ---- rewrite IHn1. reflexivity.
  ---- rewrite IHn0. specialize (M b n0). rewrite M. trivial.
  --- rewrite (J I n).
  induction n.
  * simpl. contradiction.
  * simpl.
  assert (K : forall n, AddLr (repeat I n) (repeat I n) I = repeat I n).
  induction n0; simpl; try reflexivity.
  ** rewrite IHn0. reflexivity. 
  ** rewrite K. rewrite (J I n).  
  assert (L : forall n, NotL (repeat I n ++ [O]) = repeat O n ++ [I]).
  induction n0; simpl; try reflexivity; try f_equal; rewrite IHn0. reflexivity.
  rewrite L. trivial.
Qed.

