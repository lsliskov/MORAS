Set Implicit Arguments.
Require Import List.
Import ListNotations.
(*Require Import Omega*)


(* Bit *)

Inductive B : Type :=
  | O : B
  | I : B.

Definition And (x y : B) : B :=
match x with
  | O => O
  | I => y
end.

Definition Or (x y : B) : B :=
match x with
  | O => y
  | I => I
end.

Definition Not (x : B) : B :=
match x with
  | O => I
  | I => O
end.

Definition Add (x y c : B) : B :=
match x, y with
  | O, O => c
  | I, I => c
  | _, _ => Not c
end.

Definition Rem (x y c : B) : B :=
match x, y with
  | O, O => O
  | I, I => I
  | _, _ => c
end.
Lemma zad1a (x y : B) : 
    Or (And x (Not y)) (Or (And (Not x) (Not y)) (And (Not x) y)) = Or (Not y) (Not x).
Proof.
   destruct x, y; simpl; reflexivity.
Qed.

Lemma zad1b (x y z : B) : 
   And (And (Not (And (Not x) (And y z))) (Not (And x (And y (Not z))))) (And x (And (Not y) z)) = And x (And (Not y) z).
Proof.
  destruct x, y, z; simpl; trivial.